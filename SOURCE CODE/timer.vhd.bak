library IEEE;
use IEEE.std_logic_1164.all;
use work.EE232.all;

entity timer is 
	port ( CLK : in std_logic;
		    RS : in std_logic;
			 S,M,H,K,R,T: in std_logic;
			 H0: out std_logic_vector(6 downto 0);
			 H1: out std_logic_vector(6 downto 0);
			 H2: out std_logic_vector(6 downto 0);
			 H3: out std_logic_vector(6 downto 0);
			 H4: out std_logic_vector(6 downto 0);
			 H5: out std_logic_vector(6 downto 0);
			 X : out std_logic_vector(5 downto 0);
			 Y : out std_logic
			  );
end timer;

architecture FUNCTIONALITY of timer is
	signal A,B,C : std_logic_vector(5 downto 0);
	signal D,E,N,O,P,L : std_logic;
	signal HEX0:  std_logic_vector(5 downto 0);
   signal HEX1:  std_logic_vector(5 downto 0);
	signal HEX2:  std_logic_vector(5 downto 0);
	signal HEX3: std_logic_vector(7 downto 0);
	signal HEX4: std_logic_vector(7 downto 0);
	signal HEX5: std_logic_vector(7 downto 0);
	signal HEX6:  std_logic_vector(5 downto 0);
   signal HEX7:  std_logic_vector(5 downto 0);
	signal HEX8:  std_logic_vector(5 downto 0);
begin
	U0 : SEC_INC port map( CLK => CLK, RSTN => R, S => S, A=> A);
	
	U1 : SEC_COUN port map( CLK =>CLK, RSTN => RS, K => L,M=> A, L=> HEX0);
	L <= (N OR O OR P) AND K;
	N <= HEX0(0) OR HEX0(1) OR HEX0(2) OR HEX0(3) OR HEX0(4) OR HEX0(5);
	
	D <= (N OR O OR P) AND (NOT( N  AND K));
	U2 : MIN_INC port map(   CLK   => CLK,
        RSTN   => R,
        M      => M,
        output => B);
	U3 : MIN_COUN port map( CLK => CLK,
        RSTN => RS,
        M => D,
        L => B,
        Q => HEX1);
	O <= HEX1(0) OR HEX1(1) OR HEX1(2) OR HEX1(3) OR HEX1(4) OR HEX1(5);
	E <= (N OR O OR P) AND (NOT ( O AND K));
   U4 : HRS_INC port map( CLK   => CLK,
        RSTN   => R,
        H      => H,
        output => C);
	U5 : HRS_COUN port map ( CLK => CLK,
        RSTN => RS,
        H    => E,
        L    => C,
        Q    => HEX2);
	P <= HEX2(0) OR HEX2(1) OR HEX2(2) OR HEX2(3) OR HEX2(4) OR HEX2(5);
	
	H60 : MUX_2X1 port map (HEX0(0),A(0),S,HEX6(0));
	H61 : MUX_2X1 port map (HEX0(1),A(1),S,HEX6(1));
	H62 : MUX_2X1 port map (HEX0(2),A(2),S,HEX6(2));
	H63 : MUX_2X1 port map (HEX0(3),A(3),S,HEX6(3));
	H64 : MUX_2X1 port map (HEX0(4),A(4),S,HEX6(4));
	H65 : MUX_2X1 port map (HEX0(5),A(5),S,HEX6(5));
	H70 : MUX_2X1 port map (HEX1(0),B(0),M,HEX7(0));
	H71 : MUX_2X1 port map (HEX1(1),B(1),M,HEX7(1));
	H72 : MUX_2X1 port map (HEX1(2),B(2),M,HEX7(2));
	H73 : MUX_2X1 port map (HEX1(3),B(3),M,HEX7(3));
	H74 : MUX_2X1 port map (HEX1(4),B(4),M,HEX7(4));
	H75 : MUX_2X1 port map (HEX1(5),B(5),M,HEX7(5));
	H80 : MUX_2X1 port map (HEX2(0),C(0),H,HEX8(0));
	H81 : MUX_2X1 port map (HEX2(1),C(1),H,HEX8(1));
	H82 : MUX_2X1 port map (HEX2(2),C(2),H,HEX8(2));
	H83 : MUX_2X1 port map (HEX2(3),C(3),H,HEX8(3));
	H84 : MUX_2X1 port map (HEX2(4),C(4),H,HEX8(4));
	H85 : MUX_2X1 port map (HEX2(5),C(5),H,HEX8(5));
	
	
	F0 : BinToBCD port map ( HEX6, HEX3);
	F1 : BinToBCD port map ( HEX7, HEX4);
	F2 : BinToBCD port map ( HEX8, HEX5);
	F3 : BCD2SSD port map ( HEX3(3 downto 0),H0,X(0));
	F4 : BCD2SSD port map ( HEX3(7 downto 4),H1,X(1));
	F5 : BCD2SSD port map ( HEX4(3 downto 0),H2,X(2));
	F6 : BCD2SSD port map ( HEX4(7 downto 4),H3,X(3));
	F7 : BCD2SSD port map ( HEX5(3 downto 0),H4,X(4));
	F8 : BCD2SSD port map ( HEX5(7 downto 4),H5,X(5));
	
	Y <= NOT( N OR O OR P);
   
	  
	

	
end FUNCTIONALITY;